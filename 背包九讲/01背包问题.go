package 背包九讲

/**
有N 件物品和一个容量为V 的背包。放入第i 件物品耗费的费用是Ci
1，得到的
价值是Wi。求解将哪些物品装入背包可使价值总和最大。
*/

/**
nums 为一组商品的容量和价值,[[4,5],[1,2],[2,4],[3,4],[4,5]]  前一个代表价值 后一个代表容积
v表示总容量
	假设只放一个物品
		1.如果不放 放一个物品到容积为2的价值等于 放0个物品到容积为2的价值
		2.如果放  本身价值是w[1] 容积是v[1],总价值相当于 放0个商品到v-v[1]的价值加上w[1]
	1）.如果不选择第i个物品 则此时的表达为 f[i][j]=f[i-1][j]
	2）.如果选择第i个物品 则此时表达为 f[i][j]=f[i-1][j-v[i]]+w[i]
*/
func pack01(nums [][]int, v int) int {
	n := len(nums)          //物品总件数
	dp := [1000][1000]int{} //刚开始想着是需要根据物品数量和容积来设定，其实没必要 因为不会遍历dp
	dp[0][0] = 0
	for i := 1; i <= n; i++ {
		for j := 0; j <= v; j++ {
			dp[i][j] = dp[i-1][j]
			if j >= nums[i-1][1] {
				dp[i][j] = max(dp[i][j], dp[i-1][j-nums[i-1][1]]+nums[i-1][0])
			}
		}
	}
	res := 0
	for i := 1; i <= n; i++ {
		res = max(res, dp[i][v])
	}
	return res
}

func max(x, y int) int {
	if x > y {
		return x
	}
	return y
}
