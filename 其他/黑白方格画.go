package 其他

/**
小扣注意到秋日市集上有一个创作黑白方格画的摊位。摊主给每个顾客提供一个固定在墙上的白色画板，画板不能转动。画板上有 n * n 的网格。绘画规则为，小扣可以选择任意多行以及任意多列的格子涂成黑色，所选行数、列数均可为 0。

小扣希望最终的成品上需要有 k 个黑色格子，请返回小扣共有多少种涂色方案。

注意：两个方案中任意一个相同位置的格子颜色不同，就视为不同的方案。

示例 1：

输入：n = 2, k = 2

输出：4

解释：一共有四种不同的方案：
第一种方案：涂第一列；
第二种方案：涂第二列；
第三种方案：涂第一行；
第四种方案：涂第二行。

示例 2：

输入：n = 2, k = 1

输出：0

解释：不可行，因为第一次涂色至少会涂两个黑格。

示例 3：

输入：n = 2, k = 4

输出：1

解释：共有 2*2=4 个格子，仅有一种涂色方案。

限制：

1 <= n <= 6
0 <= k <= n * n

来源：力扣（LeetCode）
链接：https://leetcode-cn.com/problems/ccw6C7
著作权归领扣网络所有。商业转载请联系官方授权，非商业转载请注明出处。
*/

//又是简单题没想出来 这种感觉使不出劲  倒是想到了组合 查了下公式 写了个方法来计算
//但是刚开始是想的是 复杂多了  具体思路是假设选择a行b列 如果计算个数刚好等于k 那a行b列就符合
//此时就是n行选a行 n列选b列了 乘下最后所有情况加起来
func paintingPlan(n int, k int) int {
	if k == 0 {
		return 1
	}
	if k < n {
		return 0
	}
	if n*n == k {
		return 1
	}
	sum := 0
	for i := 0; i <= n; i++ {
		for j := 0; j <= n; j++ {
			if i*n+j*(n-i) == k {
				sum += c(n, i) * c(n, j)
			}
		}
	}
	return sum
}

func c(m, n int) int {
	a := 1
	for i := m; i >= (m - n + 1); i-- {
		a *= i
	}
	b := 1
	for i := n; i >= 1; i-- {
		b *= i
	}
	return a / b
}
